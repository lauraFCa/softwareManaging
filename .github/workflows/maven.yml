# Workflow to Build, Run tests and Deploy app

name: Build Tests Deploy

on:
  push:
    branches:
      - master
      - release-candidate
      - unit-tests
    paths-ignore:
      - '**/readme.md'
  pull_request:
    branches:
      - master
      - release-candidate
      - unit-tests
    paths-ignore:
      - '**/readme.md'

jobs:

  build:
    name: Build and Analyze
    runs-on: ubuntu-latest
    env:
      GIT_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'


      - name: Configure Git
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git config --local credential.helper "store --file=.git/credentials"
          echo "machine github.com login actions password $GIT_TOKEN" >> .git/credentials
  
      
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache Maven packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2
      # - name: Build and analyze
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GIHUB_TOKEN }} 
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=br.cesjf:HotelLucena
        
      - name: Setar variável PIPELINE_EXECUTION_ID
        run: echo "PIPELINE_EXECUTION_ID=${{ github.run_id }}" >> $GITHUB_ENV

      - name: Gerar URL da badge
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "BADGE_URL=https://img.shields.io/static/v1?label=Build-and-Analyze&message=success&color=green" >> $GITHUB_ENV
          else
            echo "BADGE_URL=https://img.shields.io/static/v1?label=Build-and-Analyze&message=success&color=red" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Obter conteúdo da linha 5
        run: |
          CONTENT=$(sed -n '5p' readme.md)
          echo "CONTENT=$CONTENT" >> $GITHUB_ENV

      - name: Comando - Atualizar README.md com a badge
        run: |
          echo sed -i "5s~$CONTENT~[![Status do Job]($BADGE_URL)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
      
      - name: Run - Atualizar README.md com a badge
        run: |
          sed -i "5s~$CONTENT~[![Status do Job]($BADGE_URL)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md

      - name: Commit e push das alterações
        run: |
          git add .
          git commit -m "Add badge to readme"
          git push



  # unit-tests:
  #   name: Unit Tests Run
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up JDK 8
  #     uses: actions/setup-java@v2
  #     with:
  #       java-version: 8
  #       distribution: 'temurin'

  #   - name: Cache Maven packages
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.m2/repository
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

  #   - name: Build with Maven
  #     run: mvn clean package

  #   - name: Run Unit Tests
  #     run: |
  #       mvn test

  #   - name: Publish Test Results
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: test-results
  #       path: target/surefire-reports
    
  #   - name: Display Test Results
  #     run: cat target/surefire-reports/*.txt


  # deploy:
  #   name: Deploy to Plataform
  #   if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs: unit-tests
  #   steps:
  #   - name: Deploy to Plataform
  #     run: echo "Azure for students not working :("
  #     # uses: SamKirkland/FTP-Deploy-Action@3.0.0
  #     # with:
  #     #   server: files.000webhost.com
  #     #   ftp-server: files.000webhost.com
  #     #   username: ${{ secrets.FTP_USERNAME }}
  #     #   ftp-username: ${{ secrets.FTP_USERNAME }}
  #     #   password: ${{ secrets.FTP_PASSWORD }}
  #     #   ftp-password: ${{ secrets.FTP_PASSWORD }}
  #     #   server-dir: /public_html/
  #     #   local-file: manutencaoSoft/target/HotelLucena-1.0-SNAPSHOT.jar


  # interface-tests:
  #   name: Cypress e2e Tests
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Configurar ambiente
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'

  #     - name: Instalar dependencias
  #       run: npm install
  #       working-directory: tests
  #     - name: Executar Cypress
  #       run: npm run cy:run
  #       working-directory: tests
  
  
  # jmeter-tests:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install JMeter
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install default-jre -y
  #         wget https://mirror.navercorp.com/apache//jmeter/binaries/apache-jmeter-5.4.3.tgz
  #         tar -xzf apache-jmeter-5.4.3.tgz
  #         rm apache-jmeter-5.4.3.tgz
  #         mkdir -p apache-jmeter-5.4.3/lib
  #         cp lib/jmeter-plugins-cmn-jmeter-0.4.jar apache-jmeter-5.4.3/lib
      
  #     - name: Run Jmeter Tests
  #       run: |
  #         ./apache-jmeter-5.4.3/bin/jmeter -n -t testplan.jmx -l testreport.jtl
