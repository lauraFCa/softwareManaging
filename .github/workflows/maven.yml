# Workflow to Build and run tests

name: Build Tests Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        cache: maven
        java-version: '8'
    - name: Build
      run: mvn -B package --file pom.xml


  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          cache: maven
          java-version: '8'
      - name: Run Unit Tests
        run: mvn -B test --file pom.xml
      - name: Generate test report
        run: |
          # Install chart.js and the GitHub API client
          npm install chart.js @actions/github
          # Generate test report data
          TEST_COUNT=$(grep -oE '<testsuites[^>]* tests="\K\d+' report.xml)
          TEST_PASSED=$(grep -oE '<testsuites[^>]* passed="\K\d+' report.xml)
          TEST_FAILED=$(grep -oE '<testsuites[^>]* failures="\K\d+' report.xml)
          TEST_SKIPPED=$(grep -oE '<testsuites[^>]* skipped="\K\d+' report.xml)
          # Generate chart
          node -e "
          const { Octokit } = require('@octokit/rest');
          const Chart = require('chart.js');
          const data = {
            labels: ['Passed', 'Failed', 'Skipped'],
            datasets: [
              {
                label: 'Test Results',
                data: [$TEST_PASSED, $TEST_FAILED, $TEST_SKIPPED],
                backgroundColor: ['#28a745', '#dc3545', '#ffc107']
              }
            ]
          };
          const config = {
            type: 'doughnut',
            data,
            options: {
              plugins: {
                legend: {
                  position: 'bottom'
                }
              }
            }
          };
          const canvas = document.createElement('canvas');
          const context = canvas.getContext('2d');
          new Chart(context, config);
          console.log(canvas.toDataURL());
          "
        id: chart
      - name: Create chart issue comment
        uses: actions/github-script@v4
        with:
          script: |
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const { data: issue } = await octokit.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Test Results',
              body: `![Test Results](${{ steps.chart.outputs.chart }})`,
            });
            console.log(`Created issue comment ${issue.html_url}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  interface-tests:
      runs-on: ubuntu-latest
      needs: unit-tests
      steps:
        - uses: actions/checkout@v2
        - name: Configurar ambiente
          uses: actions/setup-node@v2
          with:
            node-version: '14'
        - name: Instalar dependencias
          run: npm install
          working-directory: tests
        - name: Executar testes de interface - Cypress
          run: npm run cy:run
          working-directory: tests
  
  jmeter-tests:
    runs-on: ubuntu-latest
    needs: interface-tests
    steps:
      - name: Teste de Performance com JMeter
        working-directory: manutencaoSoft
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz
          tar -xzf apache-jmeter-5.4.1.tgz
          curl -LJO https://github.com/OWNER/REPO/actions/runs/12345678/artifacts/manifest.json
          BASE_URL=$(cat manifest.json | grep -Po '"baseUrl":.*?[^\\]",' | sed 's/"baseUrl":"\(.*\)",/\1/g')
          apache-jmeter-5.4.1/bin/jmeter -n -t testplan.jmx -JbaseUrl=${BASE_URL} -l results.jtl


  deploy:
    runs-on: ubuntu-latest
    needs: interface-tests
    steps:
    - name: Deploy to 000webhost
      uses: SamKirkland/FTP-Deploy-Action@3.0.0
      with:
        server: files.000webhost.com
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        server-dir: /public_html/
        local-file: manutencaoSoft/target/HotelLucena-1.0-SNAPSHOT.jar

