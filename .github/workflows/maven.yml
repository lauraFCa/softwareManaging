# Workflow to Build, Run tests and Deploy app

name: Build Tests Deploy

on:
  push:
    branches:
      - master
      - release-candidate
      - unit-tests
    paths-ignore:
      - '**/readme.md'
  pull_request:
    branches:
      - master
      - release-candidate
      - unit-tests
    paths-ignore:
      - '**/readme.md'

jobs:

  build:
    name: Build and Analyze
    runs-on: ubuntu-latest
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      
      # - name: Cache SonarCloud packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache Maven packages
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2
      # - name: Build and analyze
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GIHUB_TOKEN }} 
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=br.cesjf:HotelLucena


  unit-tests:
    name: Unit Tests Run
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: 8
        distribution: 'temurin'

    # - name: Cache Maven packages
    #   uses: actions/cache@v2
    #   with:
    #     path: ~/.m2/repository
    #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

    # - name: Build with Maven
    #   run: mvn clean package

    # - name: Run Unit Tests
    #   run: |
    #     mvn test

    # - name: Publish Test Results
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: test-results
    #     path: target/surefire-reports
    
    # - name: Display Test Results
    #   run: cat target/surefire-reports/*.txt    

    # - name: Delete Test Results Artifact
    #   uses: geekyeggo/delete-artifact@v2
    #   with:
    #     name: test-results


  deploy:
    name: Deploy to Plataform
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
    - name: Deploy to Plataform
      run: echo "Azure for students not working :("
      # uses: SamKirkland/FTP-Deploy-Action@3.0.0
      # with:
      #   server: files.000webhost.com
      #   ftp-server: files.000webhost.com
      #   username: ${{ secrets.FTP_USERNAME }}
      #   ftp-username: ${{ secrets.FTP_USERNAME }}
      #   password: ${{ secrets.FTP_PASSWORD }}
      #   ftp-password: ${{ secrets.FTP_PASSWORD }}
      #   server-dir: /public_html/
      #   local-file: manutencaoSoft/target/HotelLucena-1.0-SNAPSHOT.jar


  interface-tests:
    name: Cypress e2e Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Configurar ambiente
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Instalar dependencias
        run: npm install
        working-directory: tests
      - name: Executar Cypress
        run: npm run cy:run
        working-directory: tests
  
  
  jmeter-tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Install JMeter
        run: |
          sudo apt-get update
          sudo apt-get install default-jre -y
          wget https://mirror.navercorp.com/apache//jmeter/binaries/apache-jmeter-5.4.3.tgz
          tar -xzf apache-jmeter-5.4.3.tgz
          rm apache-jmeter-5.4.3.tgz
          mkdir -p apache-jmeter-5.4.3/lib
          cp lib/jmeter-plugins-cmn-jmeter-0.4.jar apache-jmeter-5.4.3/lib
      
      - name: Run Jmeter Tests
        run: |
          ./apache-jmeter-5.4.3/bin/jmeter -n -t testplan.jmx -l testreport.jtl


  create-badges-build-unit:
    name: Create Status Badges
    if: github.ref != 'refs/heads/master' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    steps:
    - name: Instalar jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Obter branch de origem
      run: |
        pr_number=${{ github.event.pull_request.number }}
        branch_name=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${pr_number}" \
          | jq -r '.head.ref')
        echo ${{ github.event.pull_request.number }}
        echo ${{ github.repository }}
        echo "Branch de origem: $branch_name"
        echo "git push -v origin HEAD:$branch_name"

    - uses: actions/checkout@v2
      with:
        ref: ${{ github.repository }}/$branch_name

    #region BADGE STUFF
    - name: Setar variável PIPELINE_EXECUTION_ID
      run: echo "PIPELINE_EXECUTION_ID=${{ github.run_id }}" >> $GITHUB_ENV

    - name: Gerar URL da badge BUILD
      run: |
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "BADGE_URL_Build=https://img.shields.io/static/v1?label=Build-and-Analyze\&message=success\&color=green" >> $GITHUB_ENV
        else
          echo "BADGE_URL_Build=https://img.shields.io/static/v1?label=Build-and-Analyze\&message=failure\&color=red" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Gerar URL da badge UNIT
      run: |
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "BADGE_URL_Unit=https://img.shields.io/static/v1?label=Unit-Tests\&message=success\&color=green" >> $GITHUB_ENV
        else
          echo "BADGE_URL_Unit=https://img.shields.io/static/v1?label=Unit-Tests\&message=failure\&color=red" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Set Badges on Readme
      run: |
        sed -i "5s~.*~[![Status do Job]($BADGE_URL_Build)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
        sed -i "7s~.*~[![Status do Job]($BADGE_URL_Unit)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
        
    #endregion

    #region GIT STUFF

    - name: Configurar usuario Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "${{ secrets.USER_NAME }}"
        git config --global credential.helper store
        echo "https://github.com:${{ secrets.ACCESS_TOKEN }}@github.com" >> ~/.git-credentials

    - name: Commit e push
      run: |
        git add .
        git status
        git commit -v -m "Add badges to readme"
        git push -v

    #endregion

  create-badges-all:
      name: Create Status Badges
      runs-on: ubuntu-latest
      needs: [build, unit-tests, deploy, interface-tests, jmeter-tests]
      steps:
      - uses: actions/checkout@v2
  
      #region BADGE STUFF
      - name: Setar variável PIPELINE_EXECUTION_ID
        run: echo "PIPELINE_EXECUTION_ID=${{ github.run_id }}" >> $GITHUB_ENV

      - name: Gerar URL da badge BUILD
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "BADGE_URL_Build=https://img.shields.io/static/v1?label=Build-and-Analyze\&message=success\&color=green" >> $GITHUB_ENV
          else
            echo "BADGE_URL_Build=https://img.shields.io/static/v1?label=Build-and-Analyze\&message=failure\&color=red" >> $GITHUB_ENV
          fi
        shell: bash
  
      - name: Gerar URL da badge UNIT
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            echo "BADGE_URL_Unit=https://img.shields.io/static/v1?label=Unit-Tests\&message=success\&color=green" >> $GITHUB_ENV
          else
            echo "BADGE_URL_Unit=https://img.shields.io/static/v1?label=Unit-Tests\&message=failure\&color=red" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Gerar URL da badge DEPLOY
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "BADGE_URL_Deploy=https://img.shields.io/static/v1?label=Deploy\&message=success\&color=green" >> $GITHUB_ENV
          elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "BADGE_URL_Deploy=https://img.shields.io/static/v1?label=Deploy\&message=failure\&color=red" >> $GITHUB_ENV
          else
            echo "BADGE_URL_Deploy=https://img.shields.io/static/v1?label=Cypress-Tests\&message=not-run\&color=%23808080" >> $GITHUB_ENV
          fi
        shell: bash
  
      - name: Gerar URL da badge CYPRESS
        run: |
          if [[ "${{ needs.interface-tests.result }}" == "success" ]]; then
            echo "BADGE_URL_Cypress=https://img.shields.io/static/v1?label=Cypress-Tests\&message=success\&color=green" >> $GITHUB_ENV
          elif [[ "${{ needs.interface-tests.result }}" == "failure" ]]; then
            echo "BADGE_URL_Cypress=https://img.shields.io/static/v1?label=Cypress-Tests\&message=failure\&color=red" >> $GITHUB_ENV
          else
            echo "BADGE_URL_Cypress=https://img.shields.io/static/v1?label=Cypress-Tests\&message=not-run\&color=%23808080" >> $GITHUB_ENV
          fi
        shell: bash
    
      - name: Gerar URL da badge JMETER
        run: |
          if [[ "${{ needs.jmeter-tests.results }}" == "success" ]]; then
            echo "BADGE_URL_Jmeter=https://img.shields.io/static/v1?label=Jmeter-Tests\&message=success\&color=green" >> $GITHUB_ENV
          elif [[ "${{ needs.jmeter-tests.result }}" == "failure" ]]; then
            echo "BADGE_URL_Jmeter=https://img.shields.io/static/v1?label=Jmeter-Tests\&message=failure\&color=red" >> $GITHUB_ENV
          else
            echo "BADGE_URL_Jmeter=https://img.shields.io/static/v1?label=Jmeter-Tests\&message=not-run\&color=%23808080" >> $GITHUB_ENV
          fi
        shell: bash
  
  
      - name: Set Badges on Readme
        run: |
          sed -i "5s~.*~[![Status do Job]($BADGE_URL_Build)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
          sed -i "7s~.*~[![Status do Job]($BADGE_URL_Unit)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
          sed -i "7s~.*~[![Status do Job]($BADGE_URL_Unit)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
          sed -i "9s~.*~[![Status do Job]($BADGE_URL_Deploy)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
          sed -i "11s~.*~[![Status do Job]($BADGE_URL_Cypress)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
          sed -i "13s~.*~[![Status do Job]($BADGE_URL_Jmeter)](https://github.com/lauraFCa/manutencaoSoft/actions/runs/$PIPELINE_EXECUTION_ID)~" readme.md
      
      #endregion
  
      #region GIT STUFF
  
      - name: Configurar usuario Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "${{ secrets.USER_NAME }}"
          git config --global credential.helper store
          echo "https://github.com:${{ secrets.ACCESS_TOKEN }}@github.com" >> ~/.git-credentials
  
      - name: Commit e push
        run: |
          git add .
          git status
          git commit -v -m "Add badges to readme"
          git push -v
  
      #endregion
  